---
title: "Check MR1 calibration"
author: "Baptiste schmid"
format: html
editor: visual
execute:
  echo: false
---

```{r packages}
#| echo: false
#| message: false
library(tidyverse, quietly = TRUE)
library(knitr, quietly = TRUE)
# library(kableExtra))
library(dbplyr, quietly = TRUE)
library(yaml, quietly = TRUE)
library(dplyr, quietly = TRUE)
library(birdscanR, quietly = TRUE)
```

```{r}
mainOutputDir <- "C:/Users/bs/OneDrive - Vogelwarte/31403 Radartechnik/SBRS divers/Calibration_MR1/BS223"
```

## Calibrate MR1

Multiple MR1 radar can run in close proximity (few meters aprat) to check and correct their calibration.

How to:

get data from the echo table

Create scatterplot of max_level (feature14) by height (feaure1)

-   filter by short pulse

-   filter by class

-   filter by wingbeat frequency

## Load Database Configuration

```{r setup calibration 2025}
#| eval: true
#| warning: false
# Load the YAML configuration
config_yaml <- "
databases:
  - dbname: 'HR_Vrana_2024'
    startTime: '2024-03-15 00:00'
    stopTime: '2024-10-15 00:00'
    siteLocation: c(43.9282615691993, 15.5097716496881)
    radarTimeZone: 'Etc/GMT0'
  
  - dbname: 'HR_Vrana_2023'
    startTime: '2023-04-15 00:00'
    stopTime: '2023-10-15 00:00'
    siteLocation: c(43.9282615691993, 15.5097716496881)
    radarTimeZone: 'Etc/GMT0'
  
  - dbname: 'DE_BadLauchstaedt_2022'
    startTime: '2022-02-22 00:00'
    stopTime: '2022-10-31 00:00'
    siteLocation: c(51.39162, 11.87529)
    radarTimeZone: 'Etc/GMT0'
  
  - dbname: 'DE_Bernburg_2021'
    startTime: '2021-03-06 00:00'
    stopTime: '2021-11-04 00:00'
    siteLocation: c(51.823944, 11.707686)
    radarTimeZone: 'Etc/GMT0'

  - dbname: 'CH_Bern_2020'#		
    startTime: '2020-07-27 00:00'
    stopTime: '2020-08-11 00:00'
    siteLocation: c(46.94897, 7.48033)
    radarTimeZone: 'Etc/GMT0'

  - dbname: 'CH_Rothenburg_2020'
    startTime: '2020-07-09 00:00'
    stopTime: '2020-08-27 00:00'
    siteLocation: c(47.0834, 8.244)
    radarTimeZone: 'Etc/GMT+1'

  - dbname: 'CH_Bern_2020'#		
    startTime: '2020-07-27 00:00'
    stopTime: '2020-08-11 00:00'
    siteLocation: c(46.94897, 7.48033)
    radarTimeZone: 'Etc/GMT+1'

  - dbname: 'CH_Zuerich_2020'# 
    startTime: '2020-08-11 00:00'
    stopTime: '2020-08-25 00:00'
    siteLocation: c(47.3932, 8.5257)
    radarTimeZone: 'Etc/GMT+1'
"

# Parse the YAML configuration
config <- yaml.load(config_yaml)

# Convert to data frame for easier manipulation
db_config <- do.call(rbind, lapply(config$databases, data.frame))

print("Database Configuration Loaded:")
# print(db_config)
```

## Database Summary

```{r summary}
#| echo: false
# Display configuration summary
cat("Number of databases:", nrow(db_config), "\n")
cat("Date range:", unique(db_config$startTime), "to", unique(db_config$stopTime), "\n")
cat("Database names:\n")
for(i in 1:nrow(db_config)) {
  cat("-", db_config$dbname[i], "\n")
}
```

## Process Each Database

```{r set database user and pwd}
#| warning: false
dbUser =  'sa' # rstudioapi::askForPassword("Database user") # can be hard coded, e.g. 'sa'
dbPwd = 'radar' # rstudioapi::askForPassword("Database password") # can be hard oded, e.g. '123pwd'

```

```{r extract DB data with birdscanR}
#| warning: false
#| message: false

rds_file <- paste0("Calibration_EchoData", paste(db_config$dbname, collapse = "_"), ".rds")
rds_path <- file.path(mainOutputDir, rds_file)

if(file.exists(rds_path)){
  echo <- readRDS(rds_path)
} else{

  # # query the databases
  for(i in 1:nrow(db_config)) { # i <- 1
    i_db <- db_config[i, ] 
    cat("Processing database:", i_db$dbname, "\n")
    cat("  Start:", i_db$startTime, "\n") 
    cat(" Stop:", i_db$stopTime, "\n") 
    
    #- extrcat data from DB
    i_dbData = extractDbData(
      dbDriverChar = "SQL Server",
      dbServer = "dbradar\\RadarData",
      dbName = i_db$dbname,
      dbUser = dbUser,
      dbPwd = dbPwd,
      saveDbToFile = FALSE,
      dbDataDir = mainOutputDir,
      radarTimeZone = i_db$radarTimeZone,
      targetTimeZone = i_db$radarTimeZone,
      #timeInterval = c(i_db$startTime, i_db$stopTime)
      listOfRfFeaturesToExtract = c(167, 168),
      siteLocation = c(47.494427, 8.716432), # i_db$siteLocation
      sunOrCivil = "civil",
      crepuscule = "nauticalSolar"
     ) 
    
  i_echo <- i_dbData$echoData %>% 
    left_join(., i_dbData$protocolData, by = 'protocolID') %>% 
    mutate(siteName = i_dbData$siteData$siteName,
           radarID = i_dbData$siteData$radarID,
           transmitPower = i_dbData$siteData$transmitPower,
           year = year(dateSunset)
           ) %>% 
    filter(time_stamp_targetTZ >= i_db$startTime & time_stamp_targetTZ <= i_db$stopTime) %>% 
    select(echoID, protocolID, stc_level, time_stamp_originTZ, time_stamp_targetTZ, time_string, dateSunset, year, dayOrNight, dayOrCrepOrNight, 
           fs, feature1.altitude_AGL, feature2.azimuth, feature3.speed, feature14.maxLevel, feature17.rcs, feature19.durationOfEcho, feature37.speed, 
           WFF_credibility, WFF_predicted, class, class_probability, mtr_factor_rf, #mtr_factor_sphereDiaCm, 
           siteID, pulseType, rotate, stc, threshold, radarID, transmitPower)
      
  
    if(i == 1){
      echo = i_echo
    } else {
      echo = rbind(echo, i_echo)
    }
    
    rm(list = ls(pattern = "^i_"))
    cat("\n") 
  }
  # save echo dataset to mainoutputdir
  saveRDS(echo, rds_path)
}


```

## Visualize

```{r}
#| echo: true
#| 
# Filter the data based on the given criteria
wbf_lower <- 5
wbf_upper <- 250
wbf_min_cred <- 0 # 0.6
pulseType <- "S"
class_sel <- 'all_echoes' # 'passerine'# 'all_birds'
filtered_data <- echo %>%
    filter(
      # class %in% class_sel,
      WFF_predicted >= wbf_lower & WFF_predicted <= wbf_upper,
      WFF_credibility > wbf_min_cred,
      pulseType == pulseType
    )
```

```{r scatter plot}
#| warning: false
#| echo: false

# Create a data frame with unique transmitPower values for each siteID and year combination
transmitPower_labels <- filtered_data %>%
  group_by(siteID, year) %>%
  summarize(
    transmitPower = first(transmitPower),
    # Calculate positions for upper left corner of each panel
    x_pos = min(feature14.maxLevel),  # Leftmost x value
    y_pos = max(feature1.altitude_AGL),     # Topmost y value
    .groups = "drop"
  )

# Create the plot with the transmitPower labels added in the upper left corner
maxLevel_plot <- ggplot(filtered_data, aes(x = feature14.maxLevel, y = feature1.altitude_AGL)) +
  # Add points
  geom_point(alpha = 0.3, color = "blue") +
  # Add quantile isolines (at 25%, 50%, 75%, and 95%)
  geom_density_2d(aes(color = after_stat(level)), bins = 4) +
  scale_color_viridis_c(option = "plasma", name = "Density") +
  # Add transmitPower label in the upper left corner of each panel
  geom_text(
    data = transmitPower_labels,
    aes(x = x_pos, y = y_pos, label = paste0("Psent: ", transmitPower, " kW")),
    hjust = 0, vjust = 1,  # Horizontal justify left (0), vertical justify top (1)
    color = "black", size = 3, fontface = "bold",
    nudge_x = 0.5,  # Small nudge to prevent text from touching the axis
    nudge_y = -5    # Small nudge down from the top edge
  ) +
  # Facet by siteID and year (keep original faceting)
  facet_wrap(~ siteID, nrow = 2, ncol = 3) # facet_grid(siteID ~ .) +
  # Add labels and title
  labs(
    title = paste0( ifelse(class_sel == 'passerine', "Passerine class", "All classes"), " (WBF [", wbf_lower, ",", wbf_upper, "], Cred > 0.6)" ),
    subtitle = "Height vs Max Level with Density Isolines",
    x = "Maximum Reflectivity Level (dBZ)",
    y = "Height (m)",
    caption = "Note: Isolines represent density quantiles (25%, 50%, 75%, 95%)"
  ) +
  # Theme adjustments
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    strip.background = element_rect(fill = "lightgray"),
    strip.text = element_text(face = "bold"),
    legend.position = "bottom"
  )

# Display the plot
print(maxLevel_plot)


# Save the plot to a file
# For a basic PNG file
file_name <- paste0( "Dbz vs height for", ifelse(class_sel == 'passerine', "Passerine class", "All classes"), " WBF ", wbf_lower, "to", wbf_upper, ".png" )
ggsave(filename = file.path(mainOutputDir, file_name), 
       plot = maxLevel_plot, width = 12, height = 8, dpi = 300)


# If there are too many siteID and year combinations, consider creating a function
# to generate plots for specific combinations or using a loop
# For example:

plot_radar_year <- function(data, radarID_val, year_val) {
  subset_data <- data %>%
    filter(radarID == radarID_val, year == year_val)
  
  ggplot(subset_data, aes(x = feature14.maxLevel, y = feature1.altitude_AGL)) +
    geom_point(alpha = 0.3, color = "blue") +
    geom_density_2d(aes(color = after_stat(level)), bins = 4) +
    scale_color_viridis_c(option = "plasma", name = "Density") +
    labs(
      title = paste("Passerine Type Detections for Radar", radar_id_val, "in", year_val),
      subtitle = "Height vs Max Level with Density Isolines (WBF Cred > 0.6)",
      x = "Maximum Reflectivity Level (dBZ)",
      y = "Height (m)"
    ) +
    theme_minimal()
}

# Example usage:
# plot_radar_year(filtered_data, 3220, 2023)



```

```{r}
#| warning: false
#| echo: false

# Function to extract quantiles for a given height range
extract_height_quantiles <- function(data, height = 500, spread = 25, 
                                   quantiles = c(1, 0.99, 0.95, 0.9, 0.75)) {
  
  # Define height range
  height_min <- height - spread
  height_max <- height + spread
  
  # Filter data for the specified height range
  height_filtered <- data %>%
    filter(feature1.altitude_AGL >= height_min & 
           feature1.altitude_AGL <= height_max)
  
  # Check if we have data in this height range
  if(nrow(height_filtered) == 0) {
    warning(paste("No data found in height range", height_min, "-", height_max, "m"))
    return(NULL)
  }
  
  # Calculate quantiles for each radar and year combination
  quantile_results <- height_filtered %>%
    group_by(siteID, year) %>%
    summarise(
      n_observations = n(),
      height_range = paste0(height_min, "-", height_max, "m"),
      q100 = quantile(feature14.maxLevel, probs = 1, na.rm = TRUE),
      q99 = quantile(feature14.maxLevel, probs = 0.99, na.rm = TRUE),
      q95 = quantile(feature14.maxLevel, probs = 0.95, na.rm = TRUE),
      q90 = quantile(feature14.maxLevel, probs = 0.9, na.rm = TRUE),
      q75 = quantile(feature14.maxLevel, probs = 0.75, na.rm = TRUE),
      .groups = 'drop'
    ) %>%
    # Round to 2 decimal places for cleaner display
    mutate(across(starts_with("q"), ~ round(.x, 2)))
  
  return(quantile_results)
}

# Function to create a nicely formatted table
# create_quantile_table <- function(quantile_data, title_suffix = "") {
#   
#   if(is.null(quantile_data)) {
#     return(NULL)
#   }
#   
#   # Create a formatted table using kable
#   library(knitr)
#   library(kableExtra)
#   
#   formatted_table <- quantile_data %>%
#     kable(
#       caption = paste0("Quantiles of Maximum Reflectivity Level (dBZ) by Height Range", title_suffix),
#       col.names = c("Radar ID", "Year", "N Obs", "Height Range", 
#                    "Q100 (Max)", "Q99", "Q95", "Q90", "Q75"),
#       align = c("l", "c", "c", "c", "c", "c", "c", "c", "c")
#     ) %>%
#     kable_styling(
#       bootstrap_options = c("striped", "hover", "condensed", "responsive"),
#       full_width = FALSE,
#       position = "center"
#     ) %>%
#     add_header_above(c(" " = 4, "Quantiles (dBZ)" = 5)) %>%
#     column_spec(1:2, bold = TRUE) %>%
#     column_spec(3, color = "blue") %>%
#     column_spec(5:9, background = "lightblue", alpha = 0.3)
#   
#   return(formatted_table)
# }
# Alternative simpler version without kable formatting (if kableExtra not available)
simple_quantile_table  <- function(data, height = 500, spread = 25) {

  results <- extract_height_quantiles(data, height = height, spread = spread)

  if(is.null(results)) {
    return(NULL)
  }

  cat("\nQuantiles of Maximum Reflectivity Level (dBZ)\n")
  cat("Height Range:", height - spread, "-", height + spread, "m\n")
  cat("=" , rep("=", 60), "\n", sep = "")

  print(results, n = Inf)

  #return(results)
}

# Example usage function
analyze_height_range <- function(data, height = 500, spread = 25) {
  
  cat("Analyzing height range:", height - spread, "-", height + spread, "m\n")
  cat("=================================================\n\n")
  
  # Extract quantiles
  results <- extract_height_quantiles(data, height = height, spread = spread)
  
  if(is.null(results)) {
    cat("No data available for analysis.\n")
    return(NULL)
  }
  
  # Print summary statistics
  cat("Summary:\n")
  cat("- Total radar-year combinations:", nrow(results), "\n")
  cat("- Total observations:", sum(results$n_observations), "\n")
  cat("- Radars included:", paste(unique(results$radarID), collapse = ", "), "\n")
  cat("- Years included:", paste(sort(unique(results$year)), collapse = ", "), "\n\n")
  
  # Create and display table
  # table_output <- create_quantile_table(results, 
  #                                      paste0(" (", height - spread, "-", height + spread, "m)"))
  table_output <- simple_quantile_table (data, height = height, spread = spread)
  
  # Also return raw results for further analysis
  list(
    table = table_output,
    data = results,
    summary = list(
      height_range = paste0(height - spread, "-", height + spread, "m"),
      n_combinations = nrow(results),
      total_obs = sum(results$n_observations),
      radars = unique(results$radarID),
      years = sort(unique(results$year))
    )
  )
}

# Quick usage examples:
# 
# # Analyze 500m ± 25m height range
# results_500m <- analyze_height_range(filtered_data, height = 500, spread = 25)
# print(results_500m$table)
# 
# # Analyze 1000m ± 50m height range  
# results_1000m <- analyze_height_range(filtered_data, height = 1000, spread = 50)
# print(results_1000m$table)
# 
# # Access raw data for further analysis
# raw_data <- results_500m$data
# View(raw_data)
```

#### Max level at 500 m agl

```{r}
# # Analyze 500m ± 25m height range
results_500m <- analyze_height_range(filtered_data, height = 500, spread = 25)
print(results_500m$table)
```
